{
  "hash": "ad7bb18fcb897789e3034640f31475b7",
  "result": {
    "markdown": "---\ntitle: \"עמודות מותנות\"\ndescription: |\n  אגרגציה על פני מגוון עמודות\nauthor: \"\"\ndate: \"2025-03-29\"\ntoc: true\ncategories: [בסיסי]\nimage: featured.png\ndraft: false\nfilters:\n  - interactive-sql\ndatabases:\n  - name: conditional_grouping_q10\n    path: \"https://raw.githubusercontent.com/AmitLevinson/sql-website/main/questions/10-conditional-grouping/q10.sql\"\n    \n---\n\n\n\n\nברוכים הבאים לתרגיל העשירי!  \n\nבתרגיל הבא נתרגל לקיחה של ערכים מעמודות לפי תנאי. זה תאור קצת כללי לתרגיל (עם 2 השאלות), אבל זה בגדול מה שהיה לי בראש כשניסיתי לתאר את האתגרים שאני מנסה לשתף פה.\n\n\n## שאלה 1\n\n### הדאטה\n\nהגעתם למקום שעוד לא יצר תהליכי ETL מוסדרים ולכן אתם בעיקר עובדים עם דאטה מ-[OLTP](https://en.wikipedia.org/wiki/Online_transaction_processing). \n\nלמטה תוכלו לראות דיאגרמת ישויות קשרים של הטבלאות ואת השם של כל אחת מעליה (עם מפתח מחבר של Payment_id). בגדול יש לנו טבלת משלמים ואילו המקבלים השונים וגובה הסכום פזורים בטבלאות שונות.\n\n::: {style=\"text-align:center;\"}\n\n![](q10_erd.png)\n\n:::\n\n\nצרו פלט שיציג את היוזר המשלם, היוזר המקבל וכמה הוא קיבל סה\"כ מאותו משלם, ללא קשר לסוג התשלום. שימו לב כי ישנם תשלומים בלי מידע על סוג התשלום (התעלמו מהם)\n\n## תרגיל 2\n\nפה כבר יש לנו את טבלת התשלומים המלאה:\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT  TOP 5 *\nFROM q10_payments\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n| payer| receiver| payment_id|Transaction_date | Amount|\n|-----:|--------:|----------:|:----------------|------:|\n|    14|        7|          1|2020-06-30       |     45|\n|    14|        7|          2|2020-07-28       |     17|\n|    14|        7|          3|2020-07-29       |     24|\n|     1|        7|          4|2020-08-27       |      4|\n|     1|        7|          5|2020-08-28       |     89|\n\n</div>\n:::\n\n\n\n\nאנחנו מעוניינים ליצור טבלת מידע על כל המשלמים ומקבלי התשלום.\n\nלשם כך, הדפיסו טבלה שתציג לנו **עמודת יוזר מקור, עמודת יוזר רפרנס, כמה תשלומים היוזר רפרנס קיבל מהמקור, כמה תשלומים היוזר רפרנס שלח למקור ומה היה התאריך האחרון שנשלח ביניהם תשלום (לא משנה הכיוון).** יוזר רפרנס הוא כל יוזר שהיה לו קשר כלשהו - כמשלם או מקבל - ליוזר המקור שלנו. אנחנו רוצים שכל משתמש ייחודי בטבלה (משלם/מקבל) יופיע כיוזר מקור\n\nאת הפלט סדרו לפי מספר הקשרים השונים של כל יוזר בסדר יורד. כלומר, היוזר שהופיע בהכי הרבה קשרים יהיה ראשון, אחריו היוזר עם מספר המופעים הגדול אחריו וכן הלאה.\n\n\n## נסו בעצמכם\n\n### אונליין \n\n<mark>נסו בחלון טקסט למטה (SQLite):</mark>\n\n\n```{.sql .interactive .conditional_grouping_q10}\n/* For Q1:\n-- SELECT * FROM Q10_PAYERS\n-- SELECT * FROM Cash\n-- SELECT * FROM Bit\n-- SELECT * FROM Checks\n*/\n\n-- Q2:\n-- SELECT * FROM q10_payments\n\n\n\n\n\n\n\n```\n\n\n### נסו על המחשב שלכם\n\n<details>\n<summary>הצג קוד ליצירת טבלה</summary>\n\n\n::: {.cell}\n\n```{.sql .cell-code style=\"max-height: 250px;overflow: scroll;\"}\n\nCREATE TABLE q10_payers (\n    payment_id\tINT,\n    payer \tINT\n);\n\nINSERT INTO q10_payers (payment_id, payer ) VALUES\n\t('1', '14 '),\n\t('2', '14 '),\n\t('3', '14 '),\n\t('4', '1 '),\n\t('5', '1 '),\n\t('6', '6 '),\n\t('7', '6 '),\n\t('8', '7 '),\n\t('9', '7 '),\n\t('10', '3 '),\n\t('11', '3 '),\n\t('12', '3 '),\n\t('13', '3 '),\n\t('14', '7 '),\n\t('15', '7 '),\n\t('16', '7 '),\n\t('17', '4 '),\n\t('18', '12 '),\n\t('19', '12 '),\n\t('20', '12 ');\n\n\tCREATE TABLE Cash (\n    receiver\tINT,\n    payment_id\tINT,\n    Amount \tINT\n);\n\nINSERT INTO Cash (payment_id, receiver,  Amount ) VALUES\n\t('1', '7', '45 '),\n\t('4', '1', '4 '),\n\t('13','3',  '84 '),\n\t('18','7',  '94 '),\n\t('19','7',  '25 '),\n\t('20','7',  '80 ');\n\n\n\tCREATE TABLE Bit (\n    receiver\tINT,\n    payment_id\tINT,\n    amount \tINT\n);\n\nINSERT INTO Bit (payment_id, receiver, amount ) VALUES\n\t('2', '7', '17 '),\n\t('5', '7', '89 '),\n\t('10','1',  '31 '),\n\t('14','22', '23 '),\n\t('16','22', '63 '),\n\t('17','7',  '75 ');\n\n\tCREATE TABLE checks (\n    receiver\tINT,\n    payment_id\tINT,\n    amount \tINT\n);\n\nINSERT INTO Checks (payment_id, receiver, amount ) VALUES\n\t('7', '7', '47 '),\n\t('8', '21','42 '),\n\t('15','22', '1 '),\n\t('6', '7', '26 ');\n\n\nCREATE TABLE q10_payments (\n    payer\tINT,\n    receiver\tINT,\n    payment_id\tINT,\n    Transaction_date\tDATE,\n    Amount \tINT\n);\n\nINSERT INTO q10_payments (payer, receiver, payment_id, Transaction_date, Amount ) VALUES\n\t('14', '7', '1', '2020-06-30', '45'),\n\t('14', '7', '2', '2020-07-28', '17'),\n\t('14', '7', '3', '2020-07-29', '24'),\n\t('1', '7', '4', '2020-08-27', '4'),\n\t('1', '7', '5', '2020-08-28', '89'),\n\t('6', '7', '6', '2020-08-29', '26'),\n\t('6', '7', '7', '2020-08-30', '47'),\n\t('7', '21', '8', '2020-08-31', '42'),\n\t('7', '21', '9', '2020-09-01', '52'),\n\t('3', '1', '10', '2020-09-04', '31'),\n\t('3', '1', '11', '2020-09-05', '92'),\n\t('3', '1', '12', '2020-09-06', '54'),\n\t('3', '1', '13', '2020-09-07', '84'),\n\t('7', '22', '14', '2020-09-08', '23'),\n\t('7', '22', '15', '2020-09-09', '1'),\n\t('7', '22', '16', '2020-09-10', '63'),\n\t('4', '7', '17', '2021-05-28', '75'),\n\t('12', '7', '18', '2021-06-30', '94'),\n\t('12', '7', '19', '2021-07-28', '25'),\n\t('12', '7', '20', '2021-07-29', '80');\n\n```\n:::\n\n\n</details>\n\n## תשובות\n\n### סרטון הסבר\n\n\n{{< video https://youtu.be/pcDbYOe7XQw >}}\n\n\n\n\n\n### תשובה 1\n\n\n::: {.cell}\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| payer| receiver| total_received|\n|-----:|--------:|--------------:|\n|     1|        1|              4|\n|     3|        1|             31|\n|     3|        3|             84|\n|     1|        7|             89|\n|     4|        7|             75|\n|     6|        7|             73|\n|    12|        7|            199|\n|    14|        7|             62|\n|     7|       21|             42|\n|     7|       22|             87|\n\n</div>\n:::\n\n\n\n<details>\n\n<summary>הצג פתרון</summary>\n\n**T-SQL**\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT payer,\n  COALESCE(cash.receiver, bit.receiver, Checks.receiver) AS receiver,\n  sum(coalesce(cash.amount, bit.amount, Checks.amount)) as total_received\nFROM Q10_PAYERS payers\nLEFT JOIN Cash on cash.payment_id = payers.payment_id\nLEFT JOIN Bit ON BIT.payment_id = payers.payment_id\nLEFT JOIN Checks ON Checks.payment_id = payers.payment_id\nWHERE COALESCE(cash.receiver, bit.receiver, Checks.receiver) IS NOT NULL\nGROUP BY payer, COALESCE(cash.receiver, bit.receiver, Checks.receiver)\n-- SELECT * FROM Checks\n```\n:::\n\n\n</details>\n\n\n### תשובה 2\n\n\n::: {.cell}\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| source| reference| n_payments_from_source| n_payments_to_source|last_transaction |\n|------:|---------:|----------------------:|--------------------:|:----------------|\n|      7|         1|                      0|                    2|2020-08-28       |\n|      7|         4|                      0|                    1|2021-05-28       |\n|      7|         6|                      0|                    2|2020-08-30       |\n|      7|        12|                      0|                    3|2021-07-29       |\n|      7|        14|                      0|                    3|2020-07-29       |\n|      7|        21|                      2|                    0|2020-09-01       |\n|      7|        22|                      3|                    0|2020-09-10       |\n|      1|         3|                      0|                    4|2020-09-07       |\n|      1|         7|                      2|                    0|2020-08-28       |\n|      3|         1|                      4|                    0|2020-09-07       |\n\n</div>\n:::\n\n\n<details>\n\n<summary>הצג פתרון</summary>\n\n**T-SQL**, (מראה רק את ה-10 שורות הראשונות)\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith entites as (\n  select payer as entity\n  from q10_payments\n  union\n  select receiver as entity\n  from q10_payments\n)\n\nSELECT  ent.Entity as source,\n  case when ent.entity = q10.payer then q10.receiver else q10.payer end as reference,\n  count(case when ent.entity = q10.payer then payment_id else null end) as n_payments_from_source,\n  count(case when ent.entity = q10.receiver then payment_id else null end) as n_payments_to_source,\n  max(transaction_date) as last_transaction\nFROM entites ent\nleft join q10_payments q10 on q10.payer = ent.entity OR ent.entity  = q10.receiver\ngroup by ent.Entity,\n  case when ent.entity = q10.payer then q10.receiver else q10.payer end\norder by count(*) over(partition by ent.Entity) desc\n\n```\n:::\n\n\n</details>\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}